{"version":3,"sources":["logo.svg","components/FunctionalComponent.js","components/ClassComponent.js","components/WithoutJsx.js","components/FunctionalWithProps.js","components/ClassWithProps.js","components/ClassWithState.js","components/ClassStateCounter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FunctionalComponent","ClassComponent","Component","WithoutJsx","React","createElement","id","className","FunctionalWithProps","props","name","greet","children","ClassWithProps","this","ClassWithState","state","message","setState","onClick","changeMessage","ClassStateCounter","counter","prevState","console","log","incrementCounter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,0FCQ5BC,G,kBAFa,kBAAM,4D,4BCEnBC,E,uKAJX,OAAO,yD,GAFkBC,aCkBdC,EAlBI,WAOjB,OAAOC,IAAMC,cACT,MACA,CAAEC,GAAI,UAAWC,UAAW,cAC5BH,IAAMC,cACJ,KACA,KACA,yBCAOG,EAba,SAACC,GAAU,IAG9BC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,MAAOC,EAAYH,EAAZG,SAEpB,OACE,6BACE,qCAAWF,EAAX,KAAmBC,GAClBC,ICKQC,E,uKAZH,IAAD,EACyBC,KAAKL,MAA9BC,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,SAEpB,OACE,6BACE,qCAAWF,EAAX,KAAmBC,GAClBC,O,GAPoBV,aC2Bda,E,kDA1Bb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,QAAS,mBAJC,E,4DASZH,KAAKI,SAAS,CACZD,QAAS,gC,+BAIH,IAAD,OACAA,EAAWH,KAAKE,MAAhBC,QAEP,OACE,6BACE,4BAAKA,GACL,4BAAQE,QAAS,kBAAM,EAAKC,kBAA5B,kB,GArBqBlB,aCqCdmB,E,kDApCb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAEDO,MAAQ,CACVM,QAAS,GAJK,E,+DAkBC,IAAD,OACjBR,KAAKI,UAAS,SAACK,EAAWd,GAAZ,MAAuB,CACnCa,QAASC,EAAUD,QAAU,MAC3B,WACFE,QAAQC,IAAI,UAAW,EAAKT,MAAMM,c,+BAI5B,IAAD,OACP,OACE,6BACE,yCAAeR,KAAKE,MAAMM,SAC1B,4BAAQH,QAAS,kBAAM,EAAKO,qBAA5B,kB,GA/BwBxB,aCwCjByB,MA/Bf,WACE,OACE,yBAAKpB,UAAU,OACb,8DACA,kBAAC,EAAD,MAEA,yDACA,kBAAC,EAAD,MAEA,yDACA,kBAAC,EAAD,MAEA,mEACA,kBAAC,EAAD,CAAqBG,KAAK,WAAWC,MAAM,gBACzC,0DAGF,8DACA,kBAAC,EAAD,CAAgBD,KAAK,WAAWC,MAAM,gBACpC,0DAGF,8DACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,mDCzBciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAM5B,c","file":"static/js/main.b6c5d559.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n// function FunctionalComponent() {\n//   return <h1>Hello Saravana</h1>;\n// }\n\nconst FunctionalComponent = () => <h2>Hello Functional Component</h2>;\n\nexport default FunctionalComponent;\n ","import React, { Component } from 'react';\n\nclass ClassComponent extends Component {\n  render() {\n    return <h2>Hello Class Component</h2>\n  }\n}\n\nexport default ClassComponent; \n\n","import React from 'react';\n\nconst WithoutJsx = () => {\n  // return (\n  //   <div>\n  //     <h2>Using JSX</h2>\n  //   </div>\n  // );\n\n  return React.createElement(\n      'div', \n      { id: 'idvalue', className: 'classvalue' }, \n      React.createElement(\n        'h2', \n        null, \n        'Using createElement'\n      )\n    );\n}\n\nexport default WithoutJsx; \n","import React from 'react'\r\n\r\nconst FunctionalWithProps = (props) => {\r\n  // console.log('props ', props);\r\n\r\n  const {name, greet, children} = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Hello {name}, {greet}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FunctionalWithProps\r\n","import React, { Component } from 'react'\r\n\r\nclass ClassWithProps extends Component {\r\n  render() {\r\n    const {name, greet, children} = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h2>Hello {name}, {greet}</h2>\r\n        {children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClassWithProps\r\n","import React, { Component } from 'react'\r\n\r\nclass ClassWithState extends Component {\r\n  constructor() {\r\n    super();      // constructor of parent Component from React\r\n\r\n    this.state = {\r\n      message: 'Welcome Visitor'\r\n    };\r\n  }\r\n\r\n  changeMessage() {\r\n    this.setState({   // sets the new value for state\r\n      message: 'Thank you for subscribing'\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {message} = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h2>{message}</h2>\r\n        <button onClick={() => this.changeMessage()}>Subscribe</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClassWithState\r\n","import React, { Component } from 'react'\r\n\r\nclass ClassStateCounter extends Component {\r\n  constructor(props) {\r\n    super(props)      // constructor of parent Component from React\r\n  \r\n    this.state = {\r\n       counter: 0\r\n    }\r\n  }\r\n\r\n  // 1. directly using this.state can cause adverse results\r\n  // incrementCounter() {    \r\n  //   this.setState({       // sets the new value for state directly using this.state\r\n  //     counter: this.state.counter + 1\r\n  //   }, () => {            // callback function that executes after state is set\r\n  //     console.log('Counter', this.state.counter);\r\n  //   });\r\n  // }\r\n\r\n  // 2. if state has to be set based on previous state, use function as first arg for setState()\r\n  incrementCounter() {    \r\n    this.setState((prevState, props) => ({       // sets the new value for state using previous state as parameter\r\n      counter: prevState.counter + 1\r\n    }), () => {            // callback function that executes after state is set\r\n      console.log('Counter', this.state.counter);\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Counter - {this.state.counter}</h2>\r\n        <button onClick={() => this.incrementCounter()}>Increment</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ClassStateCounter\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FunctionalComponent from './components/FunctionalComponent';\nimport ClassComponent from './components/ClassComponent';\nimport WithoutJsx from './components/WithoutJsx';\nimport FunctionalWithProps from './components/FunctionalWithProps';\nimport ClassWithProps from './components/ClassWithProps';\nimport ClassWithState from './components/ClassWithState';\nimport ClassStateCounter from './components/ClassStateCounter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>1. Simple Functional Component</h1>\n      <FunctionalComponent />\n\n      <h1>2. Simple Class Component</h1>\n      <ClassComponent />\n      \n      <h1>3. Complexity without JSX</h1>\n      <WithoutJsx />\n\n      <h1>4. Functional Components with Props</h1>\n      <FunctionalWithProps name=\"Saravana\" greet=\"how are you?\">\n        <p>What are your plans today?</p>\n      </FunctionalWithProps>\n\n      <h1>5. Class Components with Props</h1>\n      <ClassWithProps name=\"Saravana\" greet=\"how are you?\">\n        <p>What are your plans today?</p>\n      </ClassWithProps>\n\n      <h1>6. Class Components with State</h1>\n      <ClassWithState />\n      <ClassStateCounter />\n\n      <h1>7. Event handling</h1>\n    </div> \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}